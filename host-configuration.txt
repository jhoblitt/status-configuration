1) AMI: ami-d2c924b2.  Allow 80, 443, & 22/TCP from anywhere.  Associate
   EIP.  Log in, become root.  hostnamectl set-hostname
   status.lsst.codes (or set it in cloud-config).
2) Install EPEL: yum -y install epel-release && yum repolist
3) Install Nagios: yum -y install nagios nagios-plugins-all
   (no, we don't really need all the plugins)
4) Start Nagios: chkconfig nagios on && service nagios start
5) Start Apache: chkconfig httpd on && service httpd start
6) Smoke test: hit <ip>/nagios, use nagiosadmin and default pw, make
   sure all is well
7) Install modules we'll need: yum -y install perl-LWP-Protocol-https \
    perl-HTTP-Request-AsCGI
8) Set up hosts/groups/services (subdocument!)
9) Edit /etc/nagios/private/resource.cfg
   $USER3$ is the Github monitoring user: in our case, "sqrbot"
   $USER4$ is the Github monitoring user's personal token
   $USER5$ is, sigh, the Github monitoring user's password
10) Install Nagios Slack integration:
   https://lsstc.slack.com/services/B33GGV5AP?
11) Install livestatus:
   yum install -y check-mk-livestatus
12) Install pip:
   yum install -y python-pip
13) Install Bitly Proxy Python module:
   pip install bitly-oauth2-proxy-session
14) Copy check_bitly_proxy_https to /usr/local/bin.
15) Add livestatus to Nagios cfg:
    broker_module=/usr/lib64/check_mk/livestatus.o \
     /var/spool/nagios/cmd/nagios.live
16) Create selinux config to allow apache/nagios to use the socket and
     the new plugin.
   Take nagiossocket.te and nagiosplugin.te (subdocument!):
    checkmodule -M -m -o nagiossocket.mod nagiossocket.te
    semodule_package -o nagiossocket.pp -m nagiossocket.mod
    checkmodule -M -m -o nagiosplugin.mod nagiosplugin.te
    semodule_package -o nagiosplugin.pp -m nagiosplugin.mod
    semodule -i nagiossocket.pp
    semodule -i nagiosplugin.pp
17) Create route53 CNAME
18) create Apache status config and site config (subdocument!)
19) create CGI (yeah, I gave up on WSGI) (subdocument!)
20) restart httpd: service httpd restart

All the config (that is, "subdocument!") is in:
    https://github.com/lsst-sqre/status-configuration.git

# install sensu-plugins-http gem which provides check-http.rb
#
# The system ruby, 2.0.0, on el7 is EOL'd and sensu requires ruby >= 2.1

yum install -y centos-release-scl gcc-c++ make
yum install -y rh-ruby24-ruby-devel
scl enable rh-ruby24 -- gem install sensu-plugins-http

plugs=(
    check-head-redirect.rb
    check-http-json.rb
    check-https-cert.rb
    check-http-cors.rb
    check-http.rb
    check-last-modified.rb
)

for cmd in "${plugs[@]}"; do
    cat > "/usr/bin/${cmd}" <<END
scl enable rh-ruby24 -- $cmd \$@
END
    chmod 555 "/usr/bin/${cmd}"
done
